//This module defines the transactions in blockchain

const ChainUtil = require('../chain-util.js');
const { MINING_REWARD } = require('../difficulty.js');

class Transaction{
  constructor(){
    this.id = ChainUtil.id();   // generates unique id of every trasaction using using uuid
    this.input = null;         //input contains info abt signature, total amount transfered, TimeStamp and address of sender
    this.outputs = [];        // outputs contains all the out flow
  }

  update(senderWallet, recipient, amount){ // this will update the transactions as new transaction can be added to same transaction if send from same wallet so we not need to create to new seperate walllet.
    const senderOutput = this.outputs.find(output => output.address === senderWallet.publicKey);

    if(amount > senderOutput.amount){
      console.log(`Amount ${amount} exceeds the available balance.`);
      return;
    }

    senderOutput.amount = senderOutput.amount - amount;   // updated the old one
    this.outputs.push({ amount, address : recipient });  // adding new transaction to same transaction array
    Transaction.signTransaction(this, senderWallet);
    return this;
  }

  static transactionWithOutputs(senderWallet, outputs){
    const transaction = new this();
    transaction.outputs.push(...outputs);
    Transaction.signTransaction(transaction, senderWallet);
    return transaction;

  }

  static newTransaction(senderWallet, recipient, amount){  //create a new transaction added to blockchain

    if(amount > senderWallet.balance){
      console.log(`Amount ${amount} exceeds balance`);
      return;
    }


    return Transaction.transactionWithOutputs(senderWallet, [
      {amount : senderWallet.balance - amount, address : senderWallet.publicKey}, // sends the remanining balance to senders itself
      {amount : amount, address : recipient}   // sends the amount to recepient;
    ]);
  }

  static rewardTransaction(minerWallet, blockchainWallet){
    return Transaction.transactionWithOutputs(blockchainWallet, [{
      amount : MINING_REWARD, address :  minerWallet.publicKey
    }])
  }

  static signTransaction(transaction, senderWallet){   //sign transaction using sign function in index.js in wallet using keyPair generated by using elleptic
    transaction.input = {
      timestamp : Date.now(),
      amount : senderWallet.balance,
      address : senderWallet.publicKey,
      signature : senderWallet.sign(ChainUtil.hash(transaction.outputs))
    };
  }

  static verifyTransaction(transaction){ // verify the signature and transaction using verifySignature function in ChainUtil generated by elleptic
    return ChainUtil.verifySignature(
      transaction.input.address,
      transaction.input.signature,
      ChainUtil.hash(transaction.outputs)
    );
  }
}

module.exports = Transaction;
